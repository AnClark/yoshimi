# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
header_name {.h} 
code_name {.cc}
comment {MidiLearnUI.h} {not_in_source in_header
} 

comment {MidiLearnUI.cc} {in_source not_in_header
} 

comment {Copyright (C) 2016, Will Godfrey

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

} {in_source in_header
} 

decl {\#include <FL/fl_ask.H>
    \#include "Misc/Config.h"
    \#include "Misc/SynthEngine.h"} {private global
} 

decl {\# include "Misc/MiscFuncs.h"} {private local
} 

decl {\#include "UI/MiscGui.h"
    \#include "EffUI.h"
    \#include "BankUI.h"
    \#include "ADnoteUI.h"
    \#include "SUBnoteUI.h"
    \#include "PADnoteUI.h"
    \#include "WidgetMWSliderUI.h"
    \#include "Params/Controller.h"
    \#include "Misc/MiscFuncs.h"} {public global
} 

decl {\#include "MasterUI.h"} {private global
} 

class MidiLearnKitItem {: {public Fl_Group}
} {
  Function {make_window()} {} {
    Fl_Window midilearnkititem {
      xywh {40 553 740 30} type Double hide
      class Fl_Group
    } {
      Fl_Group midilearnkititemgroup {
        xywh {49 -5 678 23} box FLAT_BOX
      } {
        Fl_Counter CCcounter {
          callback {//send_data(16, tmp, 0xc0, n, 0xff)}
          tooltip {Continuous Controller to recognise} xywh {55 0 55 15} type Simple minimum 0 maximum 119 step 1 value 14
        }
        Fl_Choice channelchoice {
          tooltip {Incoming channel} xywh {134 0 39 15} down_box BORDER_BOX
        } {
          MenuItem {} {
            label 1
            xywh {0 0 26 15} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label 2
            xywh {10 10 26 15} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label 3
            xywh {20 20 26 15} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label 4
            xywh {30 30 26 15} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label 5
            xywh {40 40 26 15} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label 6
            xywh {50 50 26 15} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label 7
            xywh {60 60 26 15} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label 8
            xywh {70 70 26 15} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label 9
            xywh {80 80 26 15} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label 10
            xywh {90 90 26 15} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label 11
            xywh {100 100 26 15} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label 12
            xywh {110 110 26 15} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label 13
            xywh {120 120 26 15} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label 14
            xywh {130 130 26 15} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label 15
            xywh {140 140 26 15} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label 16
            xywh {150 150 26 15} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label All
            xywh {160 160 26 15} labelfont 1 labelsize 11
          }
        }
        Fl_Check_Button compresscheck {
          callback {//

    //send_data(8, o->value(), 0xc0, n, 0)}
          tooltip {Limit or compress incomming value} xywh {340 0 15 15} down_box DOWN_BOX value 1 labelfont 1 align 4
        }
        Fl_Check_Button blockcheck {
          callback {//
    //send_data(8, o->value(), 0xc0, n, 1)}
          tooltip {Stop any later lines (or system controls) responding to this CC/Channel pair} xywh {377 0 20 15} down_box DOWN_BOX labelfont 1 align 4
        }
        Fl_Counter minval {
          callback {//send_data(17, tmp, 0xc0, n, 0xff)}
          tooltip {Minimum value to pass on} xywh {195 0 55 15} type Simple minimum 0 maximum 127 step 1
        }
        Fl_Counter maxval {
          callback {//send_data(17, tmp, 0xc0, n, 0xff)}
          tooltip {Maximim value to pass on} xywh {265 0 55 15} type Simple minimum 0 maximum 127 step 1 value 127
        }
        Fl_Button commandName {
          label text
          xywh {401 0 315 15} box FLAT_BOX color 247 selection_color 247 labelfont 1 labelsize 10 align 64
        }
        Fl_Text_Display {} {
          xywh {401 0 315 15} color 247 selection_color 247 labelfont 1 labelsize 10 align 65 textsize 10
        }
      }
      Fl_Check_Button mutecheck {
        label 01
        callback {//
if (o->value())
    midilearnkititemgroup->deactivate();
else
    midilearnkititemgroup->activate();
            //send_data(8, o->value(), 0xc0, n, 0xff)}
        tooltip {Completely ignore this line} xywh {30 0 15 15} down_box DOWN_BOX labelfont 1 align 4
        code0 {o->copy_label(to_string(n + 1).c_str());}
      }
    }
  }
  Function {send_data(int control, float value, int type, int kititem = 0xff, int engine = 0xff)} {} {
    code {//
//collect_data(synth, value, (Fl::event_button() | type), control, npart, kititem, engine);
;} {}
  }
  Function {MidiLearnKitItem(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
    code {n=0;} {}
  }
  Function {clearLine()} {} {
    code {//
    ;} {}
  }
  Function {refresh()} {} {
    code {//
this->redraw();} {
      callback {//
          int answer = 1;
            if (!o->value())
                answer = fl_choice("Delete the item?", "No", "Yes", NULL);
            if (answer)
            {
                synth->actionLock(lockmute);
                midilearn->setkititemstatus(n, o->value());
                synth->actionLock(unlock);

                if (!o->value())
                    midilearnkititemgroup->deactivate();
                else
                    midilearnkititemgroup->activate();
                o->redraw();
                midilearnui->showparameters(n, -1); // use to delete the ui, if it is not to item 0
            }
            else
                o->value(1);}
    }
  }
  Function {~MidiLearnKitItem()} {} {
    code {midilearnkititem->hide();
delete(midilearnkititem);} {}
  }
  Function {init(int n_)} {} {
    code {//
n = n_;
make_window();
show();
end();} {}
  }
  decl {int n;} {private local
  }
  decl {char label[50];} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
} 

class MidiLearnUI {selected : {private MiscFuncs}
} {
  Function {make_window()} {} {
    Fl_Window midilearnwindow {
      label {Midi Learn}
      xywh {49 118 755 285} type Double hide
      code0 {;}
    } {
      Fl_Button {} {
        label Close
        callback {midilearnwindow->hide();}
        xywh {684 262 63 20} box THIN_UP_BOX
      }
      Fl_Scroll kitlist {open
        xywh {0 15 750 245} type VERTICAL box DOWN_FRAME
      } {}
      Fl_Box none {
        label {No Entries}
        xywh {290 131 206 44} labelsize 32
      }
      Fl_Box {} {
        label Mute
        xywh {18 0 41 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label CC
        xywh {65 0 40 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label Chan
        xywh {135 0 40 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label Block
        xywh {371 0 50 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label Limit
        xywh {328 0 48 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Choice options {
        label Options
        callback {//
;}
        tooltip {Load a complete learned set} xywh {15 262 71 19} down_box BORDER_BOX labelsize 11 align 8 textfont 1 textsize 11
      } {
        MenuItem load {
          label Load
          xywh {0 0 100 20} labelfont 1 labelsize 11
        }
        MenuItem save {
          label Save
          tooltip {Save a complete learned set} xywh {10 10 100 20} labelfont 1 labelsize 11
        }
        MenuItem recent {
          label Recent
          tooltip {Load a recent set} xywh {20 20 100 20} labelfont 1 labelsize 11
        }
        MenuItem clear {
          label Clear
          tooltip {Clear the current set} xywh {20 30 100 20} labelfont 1 labelsize 11
        }
      }
      Fl_Box {} {
        label {Control Function}
        xywh {525 0 131 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label Min
        xywh {205 0 40 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label Max
        xywh {275 0 40 15} labelfont 1 labelsize 11 align 18
      }
    }
  }
  Function {send_data(int control, float value, int type, int kititem = 0xff, int engine = 0xff)} {} {
    code {//
collect_data(synth, value, (Fl::event_button() | type), control, 255, 255, 255);
;} {}
  }
  Function {returns_update(CommandBlock *getData)} {} {
    code {//
    //float value = getData->data.value;
    //unsigned char type = getData->data.type;
    unsigned char control = getData->data.control;
    //unsigned char npart = getData->data.midilearn;
    //unsigned char kititem = getData->data.kit;
    //unsigned char engine = getData->data.engine;;

    switch(control)
    {
    	case 0:
    	    break;
        case 16:
            addLine(getData);
            break;
    	    
    }
    Fl::check();} {}
  }
  Function {addLine(CommandBlock *getData)} {} {
    code {//
int lineNo = ((int)getData->data.value);
int status = getData->data.type;
if (midilearnkititem[lineNo])
    delete midilearnkititem[lineNo];

string name = miscMsgPop(getData->data.par2);
cout << name << endl;
none->hide();
midilearnkititem[lineNo] = new MidiLearnKitItem(0, 0,740,20,"");
midilearnkititem[lineNo]->init(lineNo);
kitlist->add(midilearnkititem[lineNo]);

midilearnkititem[lineNo]->position(0, 20 + lineNo*20);
midilearnkititem[lineNo]->mutecheck->value(status & 4);
midilearnkititem[lineNo]->CCcounter->value(getData->data.kit);
midilearnkititem[lineNo]->channelchoice->value(getData->data.engine);
midilearnkititem[lineNo]->minval->value(getData->data.insert);
midilearnkititem[lineNo]->maxval->value(getData->data.parameter);
midilearnkititem[lineNo]->compresscheck->value(status & 2);
midilearnkititem[lineNo]->blockcheck->value(status & 1);
midilearnkititem[lineNo]->commandName->copy_label(name.c_str());} {}
  }
  Function {MidiLearnUI(SynthEngine *_synth)} {} {
    code {//
synth = _synth;
for (int i = 0; i < MIDI_LEARN_BLOCK; ++i)
    midilearnkititem[i] = NULL;
make_window();
num = 0;} {}
  }
  Function {~MidiLearnUI()} {} {
    code {;} {}
  }
  Function {Show()} {} {
    code {//
midilearnwindow->show();} {}
  }
  Function {Hide()} {} {
    code {//
midilearnwindow->hide();} {}
  }
  decl {int lastkititem;} {public local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {MidiLearnKitItem *midilearnkititem[MIDI_LEARN_BLOCK];} {private local
  }
  decl {int num;} {private local
  }
} 
