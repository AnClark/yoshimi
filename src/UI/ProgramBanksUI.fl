# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
header_name {.h} 
code_name {.cc}
comment {ProgramBanksUI.h} {not_in_source in_header
} 

comment {ProgramBanksUI.cc} {in_source not_in_header
} 

comment {
    Copyright 2010, Alan Calvert

    This file is part of yoshimi, which is free software: you can
    redistribute it and/or modify it under the terms of the GNU General
    Public License as published by the Free Software Foundation, either
    version 3 of the License, or (at your option) any later version.

    yoshimi is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with yoshimi.  If not, see <http://www.gnu.org/licenses/>.
} {in_source in_header
} 

decl {\#include <FL/Fl_Spinner.H>
    \#include <FL/Fl_Text_Display.H>
    \#include <FL/Fl_Select_Browser.H>
    \#include "Misc/SynthEngine.h"
    \#include "Misc/MiscFuncs.h"} {public global
} 

decl {\#include <iostream>
    \#include <map>
    \#include <FL/Fl_Button.H>
    \#include <FL/Fl_File_Chooser.H>
    \#include "MasterUI.h"
    \#include "MusicIO/MusicClient.h"
    \#include "Sql/ProgramBanks.h"
    \#include "Misc/Part.h"
    \#include "Misc/Config.h"} {global
} 

class ProgramBanksUI {open : MiscFuncs
} {
  Function {make_window(void)} {open return_type void
  } {
    Fl_Window ProgramBankWindow {
      label dbBank
      callback {//
            guiMaster->partui->hideInstrumentEditWindow();
            ProgramBankWindow->hide();} open
      xywh {394 621 560 465} type Double color 50 labelsize 12
      code0 {//
          labeltag = string("Part ") + asString(partnum + 1);
          o->copy_label(labeltag.c_str());} visible
    } {
      Fl_Browser BankBrowser {
        label Bank
        callback {//
            const char *tmp = NULL;
            int tag = lrintf(o->value());
            if (tag > 0)
            {
                part->partBank = tag - 1;
                switch (Fl::event_button())
                {
                    case FL_RIGHT_MOUSE:

                      cerr << "Right mouse on banks" << endl;

                      if ((tmp = fl_input((string("Bank ") + asString(tag) + string(" name:")).c_str(),
                                           progBanks->bankList[part->partBank].c_str())))
                      {
                          o->copy_label(tmp);
                          progBanks->addBank(part->partBank, string(tmp));
                          fetchBankList();
                      }

                    case FL_LEFT_MOUSE: // show details
                    case FL_MIDDLE_MOUSE:
                        guiMaster->partui->hideInstrumentEditWindow();
                        listPrograms();
                        CurrentBank->clear();
                        CurrentBank->copy_label((asString(tag) + ": " + progBanks->bankList[part->partBank]).c_str());
                        CurrentProgram->copy_label(NULL);
                        savetobanknum->value(tag);
                        savetogroup->deactivate();
                        break;

                   default:
                       cerr << "Bank event, " << (int)Fl::event_button() << endl;
                       break;
                }
            }}
        xywh {2 5 275 330} type Hold box ENGRAVED_BOX color 55 selection_color 246 labelfont 1 labelsize 11 align 6 textsize 11
        code0 {//
            fetchBankList();
            o->value(part->partBank);}
      }
      Fl_Button CurrentBank {
        callback {//
            fetchBankList();}
        tooltip {Currently selected bank} xywh {38 333 239 18} box ENGRAVED_BOX color 54 selection_color 246 labelfont 1 labelsize 11 align 20 when 6
      }
      Fl_Browser ProgramBrowser {
        label Program
        callback {//
            int tag = lrintf(o->value());
            if (tag > 0)
            {
                string progname;
                string bankname;
                unsigned char prognum = tag - 1;
                switch (Fl::event_button())
                {
                    case FL_LEFT_MOUSE:
                        if (prognum != part->partProgram)
                        {
                            guiMaster->partui->hideInstrumentEditWindow();
                            if (part->loadProgram(part->partBank, prognum))
                            {
                                progname = progBanks->programList[part->partProgram];
                                CurrentProgram->hide();
                                CurrentProgram->copy_label((asString(tag) + string(": ") + progname).c_str());
                                CurrentProgram->show();
                                CurrentProgram->activate();
                                guiMaster->partui->refreshInstrumentLabel(part->partBank,
                                    progBanks->bankList[part->partBank], prognum, progname);
                                savetoprognum->value(tag);
                                savetogroup->activate();
                                if (Runtime.BankUIAutoClose)
                                    ProgramBankWindow->hide();
                            }
                            else
                                fl_alert("Failed to load program");
                        }
                        break;

                    case FL_RIGHT_MOUSE:
                        if (part->loadProgram(part->partBank, prognum))
                        {
                            progBanks->loadProgramList(part->partBank);
                            progname = progBanks->programList[part->partProgram];
                            guiMaster->partui->refreshInstrumentLabel(part->partBank,
                                progBanks->bankList[part->partBank], prognum, progname);
                        }
                        else
                            fl_alert("Failed to load program");
                        guiMaster->partui->showInstrumentEditWindow(part);
                        savetoprognum->value(tag);
                        savetogroup->activate();
                        break;

                    case FL_MIDDLE_MOUSE:
                        cerr << "Prog browser, middle mouse" << endl;
                        break;

                    default:
                        break;
                }
            }}
        xywh {281 5 275 330} type Hold box ENGRAVED_BOX color 55 selection_color 246 labelfont 1 labelsize 11 align 6 textsize 11
        code0 {//
            o->value(0);}
      }
      Fl_Button CurrentProgram {
        callback {fetchBankList();}
        tooltip {Currently selected program} xywh {337 334 219 18} box ENGRAVED_BOX color 54 selection_color 246 labelfont 1 labelsize 11 align 20 when 6
      }
      Fl_Check_Button {} {
        label {Auto close}
        callback {Runtime.BankUIAutoClose = lrintf(o->value());}
        tooltip {automatically close the bank window if the instrument is loaded} xywh {413 438 12 15} down_box DOWN_BOX labelsize 9 align 8
        code0 {o->value(Runtime.BankUIAutoClose);}
      }
      Fl_Button {} {
        label Close
        callback {//
            guiMaster->partui->hideInstrumentEditWindow();
            ProgramBankWindow->hide();}
        xywh {502 435 50 20} box PLASTIC_UP_BOX color 246 labelsize 11
      }
      Fl_Group importexport {
        label {Import/Export} open
        xywh {335 385 219 25} labeltype NO_LABEL align 0
      } {
        Fl_Button {} {
          label {Import XML}
          callback {importXmlFile();}
          tooltip {Rescan the database, refresh the bank list} xywh {338 388 80 18} box PLASTIC_UP_BOX color 246 labelsize 10
        }
        Fl_Button {} {
          label {Export XML}
          callback {//
            char *filename = fl_file_chooser("Save:", "({*.xiz})", NULL, 0);
            if (filename == NULL)
              return;
            filename = fl_filename_setext(filename, ".xiz");
            if (isRegFile(string(filename)))
              if (!fl_choice("The file exists. \\nOverwrite it?", "No", "Yes", NULL))
                  return;
            //synth->lockSharable();
            bool result = part->saveXML(string(filename));
            //synth->unlockSharable();
            if (!result)
              fl_alert("Failed to save instrument file");}
          tooltip {Rescan the database, refresh the bank list} xywh {473 388 80 18} box PLASTIC_UP_BOX color 246 labelsize 10
        }
      }
      Fl_Group savetogroup {
        xywh {337 352 218 32}
      } {
        Fl_Button saveTo {
          label {Save to}
          callback {//
              if (!part->saveProgram(lrintf(savetobanknum->value()) - 1,
                                     lrintf(savetoprognum->value()) - 1))
                  fl_alert("Failed to save program");}
          xywh {338 360 48 18} box PLASTIC_UP_BOX color 246 labelsize 10
        }
        Fl_Spinner savetobanknum {
          label bank
          xywh {425 361 36 18} labelsize 10 maximum 128 textsize 9
        }
        Fl_Spinner savetoprognum {
          label program
          xywh {517 361 36 18} labelsize 10 maximum 128 textsize 9
        }
      }
      Fl_Group databasegroup {open
        xywh {38 355 237 100} labelsize 11
      } {
        Fl_Button {} {
          label {Refresh banks}
          callback {fetchBankList();}
          tooltip {Scan database and refresh the bank list} xywh {39 360 82 18} box PLASTIC_UP_BOX color 246 labelsize 10
        }
        Fl_Button {} {
          label {Reload database}
          callback {//
            if (fl_choice("This will clear the program bank database\\n"
                          "and reload it from the instrument files.\\n\\n"
                          "Is this what you really want?", "No", "Yes", NULL))
            {
                progBanks->scanInstrumentFiles();
                fetchBankList();
                listPrograms();
                ProgramBrowser->value(part->partProgram + 1);
            }}
          tooltip {Clear database, rescan instrument files and load the database} xywh {179 360 96 18} box PLASTIC_UP_BOX color 246 labelsize 10
        }
      }
    }
  }
  Function {ProgramBanksUI(int partnum_)} {return_type void
  } {
    code {//
        partnum = partnum_;
        part = synth->part[partnum];
        currentbank = part->partBank;
        currentprogram = part->partProgram;
        make_window();} {}
  }
  Function {~ProgramBanksUI()} {return_type virtual
  } {
    code {ProgramBankWindow->hide(); delete(ProgramBankWindow);} {}
  }
  Function {Show(int partnum_)} {return_type void
  } {
    code {//
        partnum = partnum_;
        part = synth->part[partnum];
        if (progBanks)
            listPrograms();
        ProgramBankWindow->copy_label((string("Yoshimi, Part ") + asString(partnum + 1) + string(" program selection")).c_str());
        ProgramBankWindow->show();} {}
  }
  Function {Hide(void)} {return_type void
  } {
    code {ProgramBankWindow->hide();} {}
  }
  Function {Visible(void)} {return_type bool
  } {
    code {return ProgramBankWindow->visible();} {}
  }
  Function {fetchBankList(void)} {private return_type void
  } {
    code {//
        if (!progBanks)
            return;
        progBanks->loadBankList();
        string tag;
        unsigned char bk;
        BankBrowser->hide();
        BankBrowser->clear();
        for (map<unsigned char, string>::iterator ix = progBanks->bankList.begin();
             ix != progBanks->bankList.end(); ++ ix)
        {
            bk = (*ix).first;
            tag = "   " + asString((*ix).first + 1);
            tag = tag.substr(tag.length() - 3);
            if (!(*ix).second.empty())
                tag += (string(" ") + (*ix).second);
            BankBrowser->add(tag.c_str(), (void*)bk);
            if (bk == part->partBank)
                BankBrowser->value(bk);
            BankBrowser->select(part->partBank + 1, 1);
        }
        BankBrowser->set_changed();
        BankBrowser->show();} {}
  }
  Function {listPrograms(void)} {return_type void
  } {
    code {//
        progBanks->loadProgramList(part->partBank);
        ProgramBrowser->hide();
        ProgramBrowser->clear();
        string proglabel;
        string format;
        for (map<unsigned char, string>::iterator ix = progBanks->programList.begin();
             ix != progBanks->programList.end(); ++ix)
        {
            if ((*ix).second.empty())
                proglabel = string("@C048 ") + asString((*ix).first + 1);
            else
                proglabel = string(" ") + asString((*ix).first + 1) + string("\\t") + (*ix).second;
            ProgramBrowser->add(proglabel.c_str(), (void*)(*ix).first);
        }
        ProgramBrowser->value(synth->part[partnum]->partProgram + 1);
        ProgramBrowser->show();} {}
  }
  Function {importXmlFile(void)} {open return_type void
  } {
    code {//
        const char *filename = fl_file_chooser("Load instrument:", "({*.xiz})", NULL, 0);
        if (!filename)
            return;
        bool result = part->importInstrument(string(filename));
        if (!result)
            fl_alert("Failed to import instrument file");
        else
            listPrograms();} {}
  }
  decl {//
    Part *part;
    unsigned char partnum;
    unsigned char currentbank;
    unsigned char currentprogram;
    string labeltag;} {public
  }
} 
