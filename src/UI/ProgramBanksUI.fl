# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
header_name {.h} 
code_name {.cc}
comment {ProgramBanksUI.h} {not_in_source in_header
} 

comment {ProgramBanksUI.cc} {in_source not_in_header
} 

comment {
    Copyright 2010, Alan Calvert

    This file is part of yoshimi, which is free software: you can
    redistribute it and/or modify it under the terms of the GNU General
    Public License as published by the Free Software Foundation, either
    version 3 of the License, or (at your option) any later version.

    yoshimi is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with yoshimi.  If not, see <http://www.gnu.org/licenses/>.
} {in_source in_header
} 

decl {\#include <FL/Fl_Spinner.H>
    \#include <FL/Fl_Text_Display.H>
    \#include <FL/Fl_Select_Browser.H>
    \#include "Misc/SynthEngine.h"
    \#include "Misc/MiscFuncs.h"} {public global
} 

decl {\#include <iostream>
    \#include <map>
    \#include <FL/Fl_Button.H>
    \#include <FL/Fl_File_Chooser.H>
    \#include "MasterUI.h"
    \#include "MusicIO/MusicClient.h"
    \#include "Sql/ProgramBanks.h"
    \#include "Misc/Part.h"
    \#include "Misc/Config.h"} {global
} 

class ProgramBanksUI {open : MiscFuncs
} {
  Function {make_window()} {open
  } {
    Fl_Window ProgramBankWindow {
      label dbBank open
      xywh {268 164 560 460} type Single color 50 labelsize 12
      code0 {//
          labeltag = string("Part ") + asString(partnum + 1);
          o->copy_label(labeltag.c_str());} visible
    } {
      Fl_Browser BankBrowser {
        label Bank
        callback {//
            int tag = lrintf(o->value());
            switch (Fl::event_button())
            {
              case FL_LEFT_MOUSE: // show details
              case FL_MIDDLE_MOUSE:
              case FL_RIGHT_MOUSE:
                  if (tag > 0)
                  {
                      guiMaster->partui->hideInstrumentEditWindow();
                      currentbank = tag - 1;
                      progBanks->setBank(currentbank);
                      CurrentBank->hide();
                      CurrentBank->clear();
                      string label = asString(tag) + ": " + progBanks->bankList[currentbank];
                      CurrentBank->copy_label(label.c_str());
                      CurrentBank->show();
                      ProgramBrowser->value(0);
                      CurrentProgram->copy_label(NULL);
                      listPrograms(currentbank);
                      savetobanknum->value(tag);
                      savetogroup->deactivate();
                  }
                  break;

              default:
                  cerr << "Bank event, " << (int)Fl::event_button() << endl;
                  break;
            }}
        xywh {2 5 275 330} type Hold box ENGRAVED_BOX color 55 selection_color 246 labelfont 1 labelsize 11 align 6 when 4 textsize 11
        code0 {//
            fetchBankList();
            o->value(progBanks->bankLsb);
        }
      }
      Fl_Button CurrentBank {
        callback {//
            fetchBankList();}
        tooltip {Currently selected bank} xywh {38 333 239 18} box ENGRAVED_BOX color 54 selection_color 158 labelfont 1 labelsize 11 align 20 when 6
      }
      Fl_Browser ProgramBrowser {
        label Program
        callback {//
            int tag = lrintf(o->value());
            if (tag > 0)
            {
                string progname = "<default instrument>";
                string bankname = "<default bank>";
                unsigned char prognum = tag - 1;
                switch (Fl::event_button())
                {
                    case FL_LEFT_MOUSE:
                        guiMaster->partui->hideInstrumentEditWindow();
                        if (progBanks->programList[prognum].size() > 3)
                        {
                            if (!part->loadProgram(currentbank, prognum))
                                fl_alert("Failed to load program");
                            else
                                progname = progBanks->programList[synth->part[partnum]->currentProgram];
                        }
                        else // empty program, set Part to defaults
                            part->defaults();
                        CurrentProgram->hide();
                        CurrentProgram->copy_label((asString(tag) + string(": ") + progname).c_str());
                        CurrentProgram->show();
                        CurrentProgram->activate();
                        guiMaster->partui->refreshInstrumentLabel(currentbank,
                                                                  progBanks->bankList[currentbank],
                                                                  prognum, progname);
                        savetoprognum->value(tag);
                        savetogroup->activate();
                        break;

                    case FL_RIGHT_MOUSE:
                        if (!part->loadProgram(currentbank, prognum))
                            fl_alert("Failed to load program");
                        progname = progBanks->programList[synth->part[partnum]->currentProgram];
                        guiMaster->partui->refreshInstrumentLabel(currentbank,
                            progBanks->bankList[currentbank], prognum, progname);
                        guiMaster->partui->showInstrumentEditWindow(part);
                        savetoprognum->value(tag);
                        savetogroup->activate();
                        break;

                    case FL_MIDDLE_MOUSE:
                        cerr << "Prog browser, middle mouse" << endl;
                        break;

                    default:
                        break;
                }
            }} selected
        xywh {281 5 275 330} type Hold box ENGRAVED_BOX color 55 selection_color 246 labelfont 1 labelsize 11 align 6 textsize 11
        code0 {/* code */
            o->value(0);
        }
      }
      Fl_Button CurrentProgram {
        callback {fetchBankList();}
        tooltip {Currently selected program} xywh {337 334 219 18} box ENGRAVED_BOX color 54 selection_color 118 labelfont 1 labelsize 11 align 20 when 6
      }
      Fl_Check_Button {} {
        label {Auto close}
        callback {Runtime.BankUIAutoClose = (int) o->value();}
        tooltip {automatically close the bank window if the instrument is loaded} xywh {447 434 12 15} down_box DOWN_BOX labelsize 9 align 4 deactivate
        code0 {o->value(Runtime.BankUIAutoClose);}
      }
      Fl_Button {} {
        label Close
        callback {//
            guiMaster->partui->hideInstrumentEditWindow();
            ProgramBankWindow->hide();}
        xywh {504 430 50 20} box PLASTIC_UP_BOX color 246 labelsize 11
      }
      Fl_Button {} {
        label {Refresh banks}
        callback {fetchBankList();}
        tooltip {Rescan the database, refresh the bank list} xywh {38 360 82 18} box PLASTIC_UP_BOX color 246 labelsize 10
      }
      Fl_Button {} {
        label {Reload database}
        callback {//
            if (fl_choice("This will clear the program bank database\\n"
                          "and reload it from the instrument files.\\n\\n"
                          "Is this what you really want?", "No", "Yes", NULL))
            {
                progBanks->scanInstrumentFiles();
                fetchBankList();
                progBanks->setBank(0);
            }}
        tooltip {Rescan instrument files, refresh database} xywh {162 360 96 18} box PLASTIC_UP_BOX color 246 labelsize 10
      }
      Fl_Group savetogroup {
        label {Save to Group}
        callback {/*callback*/}
        xywh {335 388 218 32} box THIN_DOWN_FRAME labeltype NO_LABEL labelsize 11 align 0
        code0 {/*code*/
            o->deactivate();}
      } {
        Fl_Button saveTo {
          label {Save to}
          callback {//
              if (!part->saveProgram(lrintf(savetobanknum->value()), lrintf(savetoprognum->value())))
                  fl_alert("Failed to save program");}
          xywh {339 393 48 20} box PLASTIC_UP_BOX color 246 labelsize 11
        }
        Fl_Spinner savetobanknum {
          label bank
          xywh {422 394 36 18} labelsize 10 maximum 128 textsize 9
        }
        Fl_Spinner savetoprognum {
          label program
          xywh {511 394 36 18} labelsize 10 maximum 128 textsize 9
        }
      }
      Fl_Button {} {
        label {Import XML}
        callback {importXmlFile();}
        tooltip {Rescan the database, refresh the bank list} xywh {338 360 80 18} box PLASTIC_UP_BOX color 246 labelsize 10
      }
      Fl_Button {} {
        label {Export XML}
        callback {//
            char *filename = fl_file_chooser("Save:", "({*.xiz})", NULL, 0);
            if (filename == NULL)
              return;
            filename = fl_filename_setext(filename, ".xiz");
            if (isRegFile(string(filename)))
              if (!fl_choice("The file exists. \\nOverwrite it?", "No", "Yes", NULL))
                  return;
            //synth->lockSharable();
            bool result = part->saveXML(string(filename));
            //synth->unlockSharable();
            if (!result)
              fl_alert("Failed to save instrument file");}
        tooltip {Rescan the database, refresh the bank list} xywh {474 360 80 18} box PLASTIC_UP_BOX color 246 labelsize 10
      }
    }
  }
  Function {ProgramBanksUI(int partnum_)} {} {
    code {//
        partnum = partnum_;
        part = synth->part[partnum];
        currentbank = progBanks->bankLsb;
        banklabel = "<unassigned>";
        make_window();} {}
  }
  Function {~ProgramBanksUI()} {return_type virtual
  } {
    code {ProgramBankWindow->hide(); delete(ProgramBankWindow);} {}
  }
  Function {Show(int partnum_)} {return_type void
  } {
    code {//
        partnum = partnum_;
        part = synth->part[partnum];
        currentbank = part->currentBank;
        progBanks->setBank(currentbank);
        listPrograms(currentbank);
        ProgramBankWindow->copy_label((string("Yoshimi, Part ") + asString(partnum + 1) + string(" program selection")).c_str());
        ProgramBankWindow->show();} {}
  }
  Function {Hide()} {return_type void
  } {
    code {ProgramBankWindow->hide();} {}
  }
  Function {Visible()} {return_type bool
  } {
    code {return ProgramBankWindow->visible();} {}
  }
  Function {fetchBankList(void)} {private return_type void
  } {
    code {//
        progBanks->loadBankList();
        string tag;
        unsigned char bk;
        BankBrowser->hide();
        BankBrowser->clear();
        for (map<unsigned char, string>::iterator ix = progBanks->bankList.begin();
             ix != progBanks->bankList.end(); ++ ix)
        {
            bk = (*ix).first;
            tag = "   " + asString((*ix).first + 1);
            tag = tag.substr(tag.length() - 3);
            if (!(*ix).second.empty())
                tag += (string(" ") + (*ix).second);
            BankBrowser->add(tag.c_str(), (void*)bk);
            if (bk == currentbank)
                BankBrowser->value(bk);
            BankBrowser->select(currentbank + 1, 1);
        }
        BankBrowser->set_changed();
        BankBrowser->show();} {}
  }
  Function {listPrograms(unsigned char banknum)} {return_type void
  } {
    code {//
        string tag;
        unsigned char prog;
        ProgramBrowser->clear();
        for (map<unsigned char, string>::iterator ix = progBanks->programList.begin();
             ix != progBanks->programList.end(); ++ix)
        {
            prog = (*ix).first;
            tag = "   " + asString(prog + 1);
            tag = tag.substr(tag.length() - 3);
            if (!(*ix).second.empty())
                tag += (string(" ") + (*ix).second);
            ProgramBrowser->add(tag.c_str(), (void*)prog);
        }
        if (banknum == synth->part[partnum]->currentBank)
             ProgramBrowser->value(synth->part[partnum]->currentProgram + 1);
        else
             ProgramBrowser->value(0);
        ProgramBrowser->set_changed();} {}
  }
  Function {importXmlFile(void)} {open return_type void
  } {
    code {//
        const char *filename;
        if (!(filename = fl_file_chooser("Load instrument:", "({*.xiz})", NULL, 0)))
            return;
        bool result = part->loadXMLinstrument(string(filename));
        if (!result)
            fl_alert("Failed to import instrument file");} {}
  }
  decl {//
    Part *part;
    unsigned char partnum;
    unsigned char currentbank;
    unsigned char currentprogram;
    string banklabel;
    string labeltag;} {public
  }
} 
