# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
header_name {.h} 
code_name {.cc}
comment {WidgetMWSlider.h} {not_in_source in_header
} 

comment {WidgetMWSlider.cc} {in_source not_in_header
} 

comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2010, Alan Calvert

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is a derivative of the ZynAddSubFX original, modified October 2010
} {in_source in_header
} 

decl {\#include <cmath>} {public local
} 

decl {\#include <FL/Fl.H>
    \#include <FL/Fl_Value_Slider.H>} {public global
} 

class mwheel_slider {: {public Fl_Slider}
} {
  decl {int reverse;} {public local
  }
  Function {mwheel_slider(int x, int y, int w, int h, const char *l=0) : Fl_Slider (x,y,w,h,l)} {} {
    code {reverse = 1;} {}
  }
  Function {handle(int ev)} {return_type int
  } {
    code {double v1, min = minimum(), max = maximum();
    int res = Fl_Slider::handle(ev); // do the base-class actions

    if (ev == FL_MOUSEWHEEL) // now check for wheel-mouse events
    {
        int d = reverse * Fl::event_dy(); // correct for weirdness
        int sign = 1 - (d<0) * 2;
        if(Fl::event_state(FL_CTRL) != 0)
            d = step() * sign;
        else
            d = d * (max - min) / 10;
        v1 = value(); // current value
        v1 = increment(v1, d); // change
        v1 = clamp(v1); // clamp to valuator limits
        value(v1); // update widget
        this->do_callback(); //maybe update
        return 1; // say we ate this event
    }
    return res;} {}
  }
} 

class mwheel_slider_rev {: {public mwheel_slider}
} {
  Function {mwheel_slider_rev(int x, int y, int w, int h, const char *l=0) : mwheel_slider (x,y,w,h,l)} {} {
    code {reverse = -1;} {}
  }
} 

class mwheel_val_slider {selected : {public Fl_Value_Slider}
} {
  decl {int reverse;} {public local
  }
  Function {mwheel_val_slider(int x, int y, int w, int h, const char *l=0) : Fl_Value_Slider (x,y,w,h,l)} {} {
    code {reverse = 1;} {}
  }
  Function {handle(int ev)} {return_type int
  } {
    code {//
    double v1, min = minimum(), max = maximum();
    int res = Fl_Value_Slider::handle(ev); // do the base-class actions

    if (ev == FL_MOUSEWHEEL) // now check for wheel-mouse events
    {
        int d = Fl::Fl::event_dy();
        int sign = 1 - (d<0) * 2;
        if(Fl::event_state(FL_CTRL) != 0)
            d = step() * sign;
        else
            d = d * (max - min) / 10;
        v1 = value(); // current value
        v1 = increment(v1, d * reverse); // change it, maybe invert
        v1 = clamp(v1); // clamp to valuator limits
        value(v1); // update widget
        this->do_callback(); //maybe update
        return 1; // say we ate this event
    }
    return res;} {}
  }
} 

class mwheel_val_slider_rev {: {public mwheel_val_slider}
} {
  Function {mwheel_val_slider_rev(int x, int y, int w, int h, const char *l=0) : mwheel_val_slider (x,y,w,h,l)} {} {
    code {reverse = -1;} {}
  }
} 
