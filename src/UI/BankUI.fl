# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
header_name {.h} 
code_name {.cc}
comment {BankUI.h} {not_in_source in_header
} 

comment {BankUI.cc} {in_source not_in_header
} 

comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2010, Alan Calvert

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of version 2 of the GNU General Public
License as published by the Free Software Foundation.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is a derivative of the ZynAddSubFX original, modified October 2010
} {selected in_source in_header
} 

decl {\#include <FL/Fl_Spinner.H>
    \#include "Misc/SynthEngine.h"
    \#include "Misc/MiscFuncs.h"} {public global
} 

decl {\#include <iostream>
    \#include <FL/Fl_Button.H>
    \#include <FL/Fl_File_Chooser.H>
    \#include "MusicIO/MusicClient.h"
    \#include "Sql/ProgramBanks.h"
    \#include "Misc/Part.h"
    \#include "Misc/Config.h"} {global
} 

class BankProcess_ {open
} {
  Function {process()} {open return_type {virtual void}
  } {}
  decl {Bank *bank;} {public
  }
} 

class BankSlot {open : {public Fl_Button, BankProcess_}
} {
  Function {BankSlot(int x,int y, int w, int h, const char *label=0):Fl_Button(x,y,w,h,label)} {return_type void
  } {
    code {//
        mousebutton = NULL;
        whatslot = NULL;
        nslot = 0;
        nselected = NULL;} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {//
        if (mousebutton == NULL)
            return 0;
        if (Fl::event_inside(this))
        {
            *mousebutton = 0;
            *whatslot = nslot;
            switch (event)
            {
                case FL_PUSH:
                    highlight = 1;
                    break;

                case FL_RELEASE:
                    switch (Fl::event_button())
                    {
                        case 1:
                            cerr << "event button 1" << endl;
                            *mousebutton = 1;
                            break;
                        case 2:
                            cerr << "event button 2" << endl;
                            *mousebutton = 2;
                            break;

                        case 3:
                            cerr << "event button 3" << endl;
                            *mousebutton = 3;
                            break;
                        default:
                            cerr << "strange event button " << (int)Fl::event_button() << endl;
                            break;
                    }
                    break;

                default:
                    break;
            }
        }
        else
            highlight = 0;

        int tmp = Fl_Button::handle(event);
        if (*mousebutton != 0 && Fl::event_inside(this))
            (bp->*fnc)();
        return tmp;} {}
  }
  Function {init(int nslot_, int *mousebutton_, int *whatslot_, void (BankProcess_:: *fnc_)(void), BankProcess_ *bp_, Bank *bank_, int *nselected_)} {return_type void
  } {
    code {//
        nslot = nslot_;
        mousebutton = mousebutton_;
        whatslot = whatslot_;
        fnc = fnc_;
        bp = bp_;
        bank = bank_;
        nselected = nselected_;
        box(FL_THIN_UP_BOX);
        labelfont(0);
        labelsize(13);
        align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE|FL_ALIGN_CLIP);
        highlight = 0;
        refresh();} {}
  }
  Function {refresh()} {open return_type void
  } {
    code {//
        if (bank->emptyslot(nslot))
        {
            color(46);
        } else {
            if (bank->isPADsynth_used(nslot))
                color(26);
		else
            color(51);
        }
        if (*nselected == nslot)
            color(6);
        label(bank->getnamenumbered(nslot).c_str());} {}
  }
  decl {int *mousebutton, *whatslot, nslot, highlight, *nselected;} {}
  decl {void (BankProcess_:: *fnc)(void);} {}
  decl {BankProcess_ *bp;} {}
} 

class BankUI {open : {public BankProcess_, private MiscFuncs}
} {
  Function {make_window()} {return_type void
  } {
    Fl_Window bankuiwindow {
      label Bank open
      xywh {594 274 785 575} type Double hide
      code0 {o->label(bank->bankfiletitle.c_str());}
      code1 {if (!bank->bankfiletitle.size())
            o->label ("Choose a bank from the bank list on the left (or go to settings if to configure the bank location) or choose 'New Bank...' to make a new bank.");}
    } {
      Fl_Button {} {
        label Close
        callback {bankuiwindow->hide();}
        xywh {705 546 70 24} box THIN_UP_BOX labelsize 12
      }
      Fl_Group theInstruments {
        xywh {5 34 772 491} box ENGRAVED_FRAME labelsize 12
      } {
        Fl_Pack {} {
          xywh {10 39 150 481} box BORDER_BOX labelsize 12
          code0 {o->box(FL_NO_BOX);}
          code1 {//
              for (int i = 0; i < 32; ++i)
              {
                  bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                  bs[i]->init(i, &mousebutton, &slot, &BankProcess_::process,
                              (BankProcess_ *)this, bank, &nselected);
              }}
        } {}
        Fl_Pack {} {
          xywh {163 39 150 481} box BORDER_BOX labelsize 12
          code0 {o->box(FL_NO_BOX);}
          code1 {//
              for (int i = 32; i < 64; ++i)
              {
                  bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                  bs[i]->init(i, &mousebutton, &slot, &BankProcess_::process,
                              (BankProcess_ *)this, bank, &nselected);
              }}
        } {}
        Fl_Pack {} {
          xywh {316 39 150 481} box BORDER_BOX labelsize 12
          code0 {o->box(FL_NO_BOX);}
          code1 {//
              for (int i = 64; i < 96; ++i)
              {
                  bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                  bs[i]->init(i, &mousebutton, &slot, &BankProcess_::process,
                              (BankProcess_ *)this, bank, &nselected);
              }}
        } {}
        Fl_Pack {} {
          xywh {469 39 150 481} box BORDER_BOX labelsize 12
          code0 {o->box(FL_NO_BOX);}
          code1 {//
              for (int i = 96; i < 128; ++i)
              {
                  bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                  bs[i]->init(i, &mousebutton, &slot, &BankProcess_::process,
                              (BankProcess_ *)this, bank, &nselected);
              }}
        } {}
        Fl_Pack {} {
          xywh {622 39 150 481} box BORDER_BOX labelsize 12
          code0 {o->box(FL_NO_BOX);}
          code1 {//
              for (int i = 128; i < 160; ++i)
              {
                  bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                  bs[i]->init(i, &mousebutton, &slot, &BankProcess_::process,
                              (BankProcess_ *)this, bank, &nselected);
              }}
        } {}
      }
      Fl_Group modeselect {
        xywh {5 528 425 42} box ENGRAVED_BOX
      } {
        Fl_Light_Button writebutton {
          label WRITE
          callback {//
              if (o->value() > 0.5)
                  mode = 2;
              removeselection();}
          xywh {116 534 99 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 1 labeltype ENGRAVED_LABEL labelfont 1 labelsize 12
          code0 {if (bank->locked()) o->deactivate();}
        }
        Fl_Light_Button readbutton {
          label READ
          callback {//
              if (o->value() > 0.5)
                  mode = 1;
              removeselection();}
          xywh {11 534 99 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 101 labeltype ENGRAVED_LABEL labelfont 1 labelsize 12
          code0 {o->value(1);}
        }
        Fl_Light_Button clearbutton {
          label CLEAR
          callback {//
              if (o->value() > 0.5)
                  mode = 3;
              removeselection();}
          xywh {221 534 99 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 0 labeltype ENGRAVED_LABEL labelfont 1 labelsize 12
          code0 {if (bank->locked()) o->deactivate();}
        }
        Fl_Light_Button swapbutton {
          label SWAP
          callback {//
              if (o->value() > 0.5)
                  mode = 4;
              removeselection();}
          xywh {325 534 99 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 227 labeltype ENGRAVED_LABEL labelfont 1 labelsize 12
          code0 {if (bank->locked()) o->deactivate();}
        }
      }
      Fl_Button {} {
        label {New Bank}
        callback {//
            const char *dirname;
            dirname = fl_input("New empty Bank:");
            if (dirname == NULL)
                return;
            if (!bank->newbank(string(dirname)))
                fl_alert("Error, could not make a new bank directory... is the default bank root dir set?");
            refreshmainwindow();}
        xywh {660 8 77 20} box PLASTIC_UP_BOX labelfont 1 labelsize 11 align 128
      }
      Fl_Check_Button {} {
        label {auto close}
        callback {Runtime.BankUIAutoClose = (int) o->value();}
        tooltip {automatically close the bank window if the instrument is loaded} xywh {705 529 60 15} down_box DOWN_BOX labelsize 10
        code0 {o->value(Runtime.BankUIAutoClose);}
      }
      Fl_Choice banklist {
        callback {//
            o->label(bank->BankNames[bank->setBank(o->value())].c_str());

            //musicClient->changeBank(synth->part[*npart]->midichannel, currentBankNum);

            //if (!bank->loadbank(bank->BankDetails[currentBankNum].dir))
            //    fl_alert("Error: Could not load the bank %d from the directory\\n%s.",
            //             currentBankNum, bank->BankDetails[currentBankNum].dir.c_str());
            //else
            //    for (int i = 0; i < MAX_BANK_SIZE; ++i)
            //        bs[i]->refresh();

            for (int i = 0; i < MAX_BANK_SIZE; ++i)
                bs[i]->refresh();
            refreshmainwindow();} open
        xywh {8 8 305 20} down_box BORDER_BOX labelfont 1 labelsize 12 align 0 textsize 12
        code0 {//
            cerr << "currentBankNum " << currentBankNum << endl;
            o->value(currentBankNum);}
      } {}
      Fl_Button {} {
        label {Refresh bank list}
        callback {//
            rescan_for_banks();
            banklist->value(0);}
        tooltip {Refresh the bank list (rescan)} xywh {332 8 105 20} box THIN_UP_BOX color 50 labelsize 11
      }
      Fl_Button {} {
        label {Reload database}
        callback {//
            bank->dbScanProgramBanks();}
        tooltip {Refresh the bank list (rescan)} xywh {489 8 105 20} box THIN_UP_BOX color 50 labelsize 11
        code0 {/* code*/}
      }
      Fl_Check_Button {} {
        label {Show PADsynth status}
        callback {//
            Runtime.CheckPADsynth = (int) o->value();
            refreshmainwindow();}
        xywh {435 530 150 15} down_box DOWN_BOX labelsize 11
        code0 {o->value(Runtime.CheckPADsynth);}
      }
    }
  }
  Function {BankUI(int *npart_)} {open
  } {
    code {//
        fnc = &BankProcess_::process;
        npart = npart_;
        bank = &synth->bank;
        mousebutton = 0;
        nselected = -1;
        make_window();
        mode = 1;
        currentBankNum = 0;} {}
  }
  Function {~BankUI()} {return_type virtual
  } {
    code {bankuiwindow->hide(); delete(bankuiwindow);} {}
  }
  Function {Show()} {open return_type void
  } {
    code {//
        bankuiwindow->show();
        readbutton->value(1);
        mode = 1;
        removeselection();
        modeselect->show();} {}
  }
  Function {Hide()} {return_type void
  } {
    code {bankuiwindow->hide();} {}
  }
  Function {init(Fl_Spinner *cbwig_)} {open return_type void
  } {
    code {cbwig = cbwig_;rescan_for_banks();} {}
  }
  Function {process()} {open return_type void
  } {
    code {//
        // mode 1 = READ
        // mode 2 = WRITE
        // mode 3 = CLEAR
        // mode 4 = SWAP
        // what 1 = button 1
        // what 2 = button 2
        // what 3 = button 3

        int slot = this->slot;
        if (mousebutton == 2 && !bank->emptyslot(slot) && mode != 4)
        {   // Rename slot
            cerr << "Rename slot" << endl;
            const char *tmp = fl_input("Slot (instrument) name:", bank->getname(slot).c_str());
            if (tmp != NULL)
                bank->setname(slot, string(tmp), -1);
            bs[slot]->refresh();
            // Re-read from slot
            synth->lockSharable();
            bank->loadfromslot(slot, synth->part[*npart]);
            synth->part[*npart]->applyparameters(true);
            synth->unlockSharable();
            synth->part[*npart]->Pname = bank->getname(slot);
            cbwig->do_callback();
        }

        if (mousebutton == 1 && mode == 1 && !bank->emptyslot(slot))
        {   // Reads from slot
            midimessage msg;
            msg.event_frame = 0;
            msg.bytes[0] = MSG_control_change | synth->part[*npart]->midichannel;
            msg.bytes[1] = C_bankselectmsb;
            msg.bytes[2] = 0;
            // queue midi

            msg.bytes[0] = MSG_control_change | synth->part[*npart]->midichannel;
            msg.bytes[1] = C_bankselectlsb;
            msg.bytes[2] = currentBankNum;
            // queue midi
            synth->part[*npart]->Pname = bank->getname(slot);
            cbwig->do_callback();
            if (Runtime.BankUIAutoClose != 0)
                bankuiwindow->hide();
        }

        if (mousebutton == 1 && mode == 2)
        {   // save(write) to slot
            cerr << "Save/write to slot" << endl;
            bool doit = true;
            if (!bank->emptyslot(slot))
                if (!fl_choice("Overwrite the slot no. %d ?", "No", "Yes", NULL, slot + 1))
                    doit = false;
            if (doit)
            {
                synth->lockSharable();
                bank->savetoslot(slot, synth->part[*npart]);
                synth->unlockSharable();
                bs[slot]->refresh();
                mode = 1;
                readbutton->value(1);
                writebutton->value(0);
            }
        }

        if (mousebutton == 1 && mode == 3 && !bank->emptyslot(slot))
        {   // Clears the slot
            cerr << "Clear the slot" << endl;
            if (fl_choice("Clear the slot no. %d ?", "No", "Yes", NULL, slot + 1))
            {
                bank->clearslot(slot);
                bs[slot]->refresh();
            }
        }

        if (mode == 4)
        {   // swap
            cerr << "Swap" << endl;
            bool done = false;
            if (mousebutton == 1 && nselected >= 0)
            {
                bank->swapslot(nselected, slot);
                int ns = nselected;
                nselected = -1;
                bs[slot]->refresh();
                bs[ns]->refresh();
                done = true;
            }
            if ((nselected < 0 || mousebutton == 2) && !done)
            {
                int ns = nselected;
                nselected = slot;
                if (ns > 0)
                    bs[ns]->refresh();
                bs[slot]->refresh();
            }
        }
        if (mode != 4)
            refreshmainwindow();} {}
  }
  Function {refreshmainwindow()} {open return_type void
  } {
    code {//
        bankuiwindow->label(bank->bankfiletitle.c_str());
        mode = 1;
        readbutton->value(1);
        writebutton->value(0);
        clearbutton->value(0);
        swapbutton->value(0);
        nselected = -1;
        if (bank->locked())
        {
            writebutton->deactivate();
            clearbutton->deactivate();
            swapbutton->deactivate();
        } else {
            writebutton->activate();
            clearbutton->activate();
            swapbutton->activate();
        }
        for (int i = 0; i < MAX_BANK_SIZE; ++i)
            bs[i]->refresh();} {}
  }
  Function {removeselection()} {return_type void
  } {
    code {//
        if (nselected >= 0)
        {
            int ns = nselected;
            nselected = -1;
            bs[ns]->refresh();
        }} {}
  }
  Function {rescan_for_banks()} {open return_type void
  } {
    code {//
        banklist->clear();
        bank->dbFetchBankList();
        for( map<int, string>::iterator bx = bank->BankNames.begin(); bx != bank->BankNames.end(); ++bx)
            banklist->add((asString((*bx).first + 1) + ".  " + (*bx).second).c_str());} {}
  }
  decl {BankSlot *bs[MAX_BANK_SIZE];
    int slot, mousebutton; // "mousebutton" = what button is pressed
    int mode, *npart, nselected;
    void (BankProcess_::* fnc)(void);
    int currentBankNum;} {}
  decl {Fl_Spinner *cbwig;} {public
  }
} 
