Currently commented out in the code and not fully updated.

This is a test feature only accessible from the command line.

                            *** WARNING ***

There are limited error checks on this so it may still be possible to crash Yoshimi with out of range values. However, most values are now range checked and may be ignored or adjusted.

Almost all relevant commands update the GUI.

Refer to "Yoshimi Control Numbers.ods" for control numbers and actions and "GUI_Interpretations.txt" for further explanations.

Also, see "Effect_Inserts" for the actual effect controllers and "Envelope_Inserts" for the envelope controller ranges.

This matches the results from using the middle mouse button in the GUI (assuming it was enabled at build time with 'ShowGuiRreports'). Some commands that are purely within the GUI, e.g window changes are recognised but not acted on. It is expected that any alternative input system will store its own copies of such intermediate information so that they remain fully independent.

The format is:

direct {value} {type} {source} {control} {part} {kit} {engine} {insert} {parameter} {par2}

direct = the actual command name, must be typed in full.

value = the value that will be set, may be negative and/or floating point (looks for the decimal point).

type = a subset of the command type:
0 for read and 64 for write.
ORed with bit 5 will turn it into a MIDI learn request.

alternatively if bit 2 is set
values & 3:
0 = adust within limits
1 = return minimum value
2 = return maximum value
3 = return default value

source = identity of were the command came from + action modifers.
values & 15:
 0 = send response to all
 1 = from MIDI
 2 = from CLI
 3 = from GUI
15 = no further action

bit-wise ORed with above:
32 = force update/redraw
128 = low priority (separate thread)
192 = mute then loop back for low priority

control = the number representing the control being changed or queried.

part = the number of the part being changed.

All the above are mandatory. The following must also be entered in sequence when needed.

kit = a part's kit number (if enabled otherwise zero).
      also used differently for effects.

engine = the synth engine being adjusted.

insert = harmonics, LFOs, filters etc. also some kit mode controls.

parameter = subtype associated with some inserts.

par2 = an offset for some parameters.

In some situations par2 is used as a miscMsg ID for passing text values between threads but synchronised via the RT thread. A failed push will return 255 and trying to pop 255 will return an empty string.

For further details see Limits.txt.
